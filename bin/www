#!/usr/bin/env node

/**
 * Module dependencies.
 */

// Monkey patch before you require http for the first time.
// The reason we do this is that some devices have poor HTTP-implementations that makes Nodes HTTP-parser to throw a fatal error (HPE_INVALID_HEADER_TOKEN).
// https://www.npmjs.com/package/http-parser-js
process.binding('http_parser').HTTPParser = require('http-parser-js').HTTPParser;

const app = require('../app').app,
      logger = require('../logger'),
      debug = require('debug')('www:server'),
      http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3003'),
    securePort = normalizePort(process.env.SECUREPORT || '3444');
app.set('port', port);
app.set('port_https', securePort);

/**
 * Create HTTP server.
 */

var server = require('../app').server;

var secureServer = require('../app').secureServer;

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
secureServer.listen(securePort);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
